---
// src/pages/api-test.astro
import { supabase } from '../providers/supabase'
import type {
  CreateListData,
  AddItemData,
  UpdateListData,
  CreateLinkRequest,
  UserList,
  ListItem,
} from '../types/newRestType'

export const api_prod = import.meta.env.PUBLIC_PROD_API_URL
export const api_dev = import.meta.env.PUBLIC_DEV_API_URL
export const api_url = import.meta.env.MODE == 'production' ? api_prod : api_dev

let responseData = ''
let loading = false
let error = ''
let requestHistory: {
  timestamp: string
  method: string
  endpoint: string
  status: number
  responseTime: string
  request: string
  response: any
}[] = []

const handleSubmit = async (event: SubmitEvent) => {
  event.preventDefault()
  const form = event.target as HTMLFormElement
  const endpoint = (form.elements.namedItem('endpoint') as HTMLInputElement)
    .value
  const method = (form.elements.namedItem('method') as HTMLSelectElement).value
  const requestBody =
    (form.elements.namedItem('body') as HTMLTextAreaElement)?.value || '{}'

  try {
    loading = true
    error = ''
    responseData = ''

    let response
    const url = new URL(`${api_url}/api/v1/${endpoint}`, window.location.origin)

    const startTime = performance.now()

    if (method === 'GET') {
      response = await fetch(url.toString())
    } else {
      const body = requestBody ? JSON.parse(requestBody) : {}
      response = await fetch(url.toString(), {
        method,
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(body),
      })


    }

    const endTime = performance.now()
    const responseTime = Math.round(endTime - startTime)

    const data = await response.json()
    responseData = JSON.stringify(data, null, 2)

    // Add the call to history
    requestHistory.unshift({
      timestamp: new Date().toLocaleTimeString(),
      method,
      endpoint,
      status: response.status,
      responseTime: `${responseTime}ms`,
      request: requestBody,
      response: data,
    })

    // Keep only the last 10 requests
    if (requestHistory.length > 10) {
      requestHistory.pop()
    }

    // Update the display
    updateRequestHistory()
  } catch (err) {
    error = err instanceof Error ? err.message : 'An error occurred'
    console.error('API Error:', err)
  } finally {
    loading = false
  }
}

// Function to update request history
const updateRequestHistory = () => {
  const historyContainer = document.getElementById('request-history')
  if (!historyContainer) return

  historyContainer.innerHTML = requestHistory
    .map(
      (req: {
        timestamp: string
        method: string
        endpoint: string
        status: number
        responseTime: string
        request: string
        response: any
      }) => `
    <div class="history-item">
      <div class="history-header">
        <span class="method ${req.method.toLowerCase()}">${req.method}</span>
        <span class="endpoint">${req.endpoint}</span>
        <span class="status">${req.status}</span>
        <span class="time">${req.responseTime}</span>
        <span class="timestamp">${req.timestamp}</span>
      </div>
      <div class="history-details">
        <div class="request-details">
          <h4>Request:</h4>
          <pre>${JSON.stringify(JSON.parse(req.request), null, 2)}</pre>
        </div>
        <div class="response-details">
          <h4>Response:</h4>
          <pre>${JSON.stringify(req.response, null, 2)}</pre>
        </div>
      </div>
    </div>
  `,
    )
    .join('')

  // Add event handlers to show/hide details
  document.querySelectorAll('.history-header').forEach((header) => {
    header.addEventListener('click', () => {
      const details = header.nextElementSibling
      if (details instanceof HTMLElement) {
        details.style.display =
          details.style.display === 'none' ? 'block' : 'none'
      }
    })
  })
}

// Function to run predefined examples
const runExample = (
  endpoint: string,
  method: string = 'GET',
  body: Record<string, any> | null = null,
) => {
  const form = document.querySelector('form')
  if (!form) return

  const endpointInput = form.elements.namedItem(
    'endpoint',
  ) as HTMLInputElement | null
  if (endpointInput) endpointInput.value = endpoint
  const methodSelect = form.elements.namedItem(
    'method',
  ) as HTMLSelectElement | null
  if (methodSelect) methodSelect.value = method
  const bodyTextarea = form.elements.namedItem(
    'body',
  ) as HTMLTextAreaElement | null
  if (bodyTextarea) {
    if (body) {
      bodyTextarea.value = JSON.stringify(body, null, 2)
    } else {
      bodyTextarea.value = ''
    }
  }

  // Simulate form submission
  const submitButton = form.querySelector('button[type="submit"]')
  if (submitButton) (submitButton as HTMLButtonElement).click()
}

// API examples based on the types
const apiExamples = [
  // Links Operations
  {
    name: 'Get All Links',
    endpoint: 'main/doQueries?type=getLinks',
    method: 'GET',
  },
  {
    name: 'Get Link By ID',
    endpoint: 'main/doQueries?type=getLink&id=1',
    method: 'GET',
  },
  {
    name: 'Create New Link',
    endpoint: 'main/doQueries?type=createLink',
    method: 'POST',
    body: {
      title: 'Test Link',
      url: 'https://example.com',
      description: 'Test link created via API',
    },
  },
  {
    name: 'Update Link',
    endpoint: 'main/doQueries?type=updateLink&id=1',
    method: 'PUT',
    body: {
      title: 'Updated Link',
      url: 'https://updated-example.com',
      description: 'Updated test link',
    },
  },
  {
    name: 'Delete Link',
    endpoint: 'main/doQueries?type=deleteLink&id=1',
    method: 'DELETE',
  },

  // Lists Operations
  {
    name: 'Get All Lists',
    endpoint: 'main/doQueries?type=getLists',
    method: 'GET',
  },
  {
    name: 'Get List By ID',
    endpoint: 'main/doQueries?type=getList&id=1',
    method: 'GET',
  },
  {
    name: 'Create New List',
    endpoint: 'main/doQueries?type=createList',
    method: 'POST',
    body: {
      name: 'New List',
      description: 'Test list created via API',
    },
  },
  {
    name: 'Update List',
    endpoint: 'main/doQueries?type=updateList&id=1',
    method: 'PUT',
    body: {
      name: 'Updated List',
      description: 'Updated test list',
    },
  },
  {
    name: 'Delete List',
    endpoint: 'main/doQueries?type=deleteList&id=1',
    method: 'DELETE',
  },

  // Collections Operations
  {
    name: 'Get All Collections',
    endpoint: 'main/doQueries?type=getCollections',
    method: 'GET',
  },
  {
    name: 'Get Collection By ID',
    endpoint: 'main/doQueries?type=getCollection&id=1',
    method: 'GET',
  },
  {
    name: 'Create New Collection',
    endpoint: 'main/doQueries?type=createCollection',
    method: 'POST',
    body: {
      name: 'New Collection',
      description: 'Test collection created via API',
    },
  },
  {
    name: 'Update Collection',
    endpoint: 'main/doQueries?type=updateCollection&id=1',
    method: 'PUT',
    body: {
      name: 'Updated Collection',
      description: 'Updated test collection',
    },
  },
  {
    name: 'Delete Collection',
    endpoint: 'main/doQueries?type=deleteCollection&id=1',
    method: 'DELETE',
  },
  {
    name: 'Get Link By ID',
    endpoint: 'links/1',
    method: 'GET',
  },
  {
    name: 'Get Context Types',
    endpoint: 'contexts',
    method: 'GET',
  },
  {
    name: 'Get Resource Types',
    endpoint: 'resources',
    method: 'GET',
  },
  {
    name: 'Get Function Types',
    endpoint: 'functions',
    method: 'GET',
  },
]
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <title>API Test Page</title>
    <style>
      :root {
        --color-success: #10b981;
        --color-error: #ef4444;
        --color-warning: #f59e0b;
        --color-console: #1e293b;
        --color-response: #0f172a;
        --color-info: #3b82f6;
        --bg-light: #f9fafb;
        --border-color: #e5e7eb;
      }

      body {
        font-family:
          system-ui,
          -apple-system,
          sans-serif;
        line-height: 1.6;
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem;
        color: #333;
        background-color: #f8f9fa;
      }
      .container {
        display: flex;
        flex-direction: column;
        gap: 2rem;
      }
      .card {
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        padding: 1.5rem;
        margin-bottom: 2rem;
        border: 1px solid var(--border-color);
      }
      .form-group {
        margin-bottom: 1rem;
      }
      label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 500;
      }
      input,
      select,
      textarea,
      button {
        width: 100%;
        padding: 0.5rem;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-family: inherit;
      }
      button {
        background: #4f46e5;
        color: white;
        border: none;
        padding: 0.75rem 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: background 0.2s;
      }
      button:hover {
        background: #4338ca;
      }
      button:disabled {
        background: #9ca3af;
        cursor: not-allowed;
      }
      pre {
        background: var(--bg-light);
        padding: 1rem;
        border-radius: 4px;
        overflow-x: auto;
        max-height: 400px;
        font-size: 0.9em;
        border: 1px solid var(--border-color);
      }
      .error {
        color: var(--color-error);
        background: #fef2f2;
        padding: 1rem;
        border-radius: 4px;
        margin: 1rem 0;
        border-left: 4px solid var(--color-error);
      }

      /* History styles */
      .history-item {
        margin-bottom: 1rem;
        border: 1px solid var(--border-color);
        border-radius: 6px;
        overflow: hidden;
      }

      .history-header {
        display: flex;
        align-items: center;
        padding: 0.75rem 1rem;
        background-color: white;
        cursor: pointer;
        border-bottom: 1px solid var(--border-color);
      }

      .history-header:hover {
        background-color: var(--bg-light);
      }

      .method {
        font-weight: 600;
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        font-size: 0.8em;
        margin-right: 0.75rem;
        color: white;
        min-width: 60px;
        text-align: center;
      }

      .get {
        background-color: var(--color-info);
      }
      .post {
        background-color: var(--color-success);
      }
      .put {
        background-color: var(--color-warning);
      }
      .delete {
        background-color: var(--color-error);
      }

      .endpoint {
        flex-grow: 1;
        font-family: monospace;
        font-weight: 500;
      }

      .status {
        font-weight: 600;
        margin: 0 1rem;
        min-width: 40px;
        text-align: center;
      }

      .time {
        color: #6b7280;
        font-size: 0.9em;
        min-width: 80px;
        text-align: right;
      }

      .timestamp {
        color: #9ca3af;
        font-size: 0.85em;
        margin-left: 1rem;
        min-width: 80px;
        text-align: right;
      }

      .history-details {
        display: none;
        background-color: white;
        padding: 1rem;
        border-top: 1px solid var(--border-color);
      }

      .history-details h4 {
        margin-top: 0;
        margin-bottom: 0.5rem;
        color: #4b5563;
      }

      .request-details,
      .response-details {
        margin-bottom: 1rem;
      }

      .example-buttons {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        gap: 0.5rem;
        margin-bottom: 1.5rem;
      }

      .example-btn {
        background: #e0e7ff;
        color: #4f46e5;
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 4px;
        cursor: pointer;
        font-size: 0.9em;
        transition: all 0.2s;
        text-align: left;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
      }

      .example-btn:hover {
        background: #c7d2fe;
      }

      .tabs {
        display: flex;
        border-bottom: 1px solid var(--border-color);
        margin-bottom: 1.5rem;
      }

      .tab {
        padding: 0.75rem 1.5rem;
        cursor: pointer;
        border-bottom: 2px solid transparent;
        font-weight: 500;
      }

      .tab.active {
        border-bottom-color: #4f46e5;
        color: #4f46e5;
      }

      .tab-content {
        display: none;
      }

      .tab-content.active {
        display: block;
      }

      .console,
      .response {
        background-color: var(--color-console);
        color: #e2e8f0;
        padding: 1rem;
        border-radius: 0.5rem;
        font-family: monospace;
        white-space: pre-wrap;
        max-height: 300px;
        overflow-y: auto;
      }

      .response {
        background-color: var(--color-response);
      }
      
      .status-bar {
        padding: 8px 16px;
        margin: 16px 0;
        border-radius: 4px;
        font-weight: 500;
        display: none;
      }

      .status-bar.success {
        background-color: #e6ffe6;
        color: #006600;
        border: 1px solid #00cc00;
      }

      .status-bar.error {
        background-color: #ffe6e6;
        color: #cc0000;
        border: 1px solid #ff0000;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <h1>API Test Page</h1>

      <div class="card">
        <h2>Test API Endpoints</h2>

        <div class="tabs">
          <div class="tab active" data-tab="examples">API Examples</div>
          <div class="tab" data-tab="custom">Custom Request</div>
          <div class="tab" data-tab="history">Request History</div>
        </div>

        <div class="tab-content active" id="examples">
          <div class="example-buttons">
            {
              apiExamples.map((example) => (
                <button
                  class="example-btn"
                  onclick={`runExample('${example.endpoint}', '${example.method}', ${example.body ? JSON.stringify(example.body) : null})`}
                >
                  {example.method} {example.name}
                </button>
              ))
            }
          </div>
        </div>

        <div class="tab-content" id="custom">
          <form>
            <div class="form-group">
              <label for="method">HTTP Method</label>
              <select id="method" name="method" required>
                <option value="GET">GET</option>
                <option value="POST">POST</option>
                <option value="PUT">PUT</option>
                <option value="DELETE">DELETE</option>
              </select>
            </div>

            <div class="form-group">
              <label for="endpoint">Endpoint (e.g., lists, links/1)</label>
              <input
                type="text"
                id="endpoint"
                name="endpoint"
                placeholder="lists"
                required
              />
            </div>

            <div class="form-group">
              <label for="body">Request Body (JSON)</label>
              <textarea
                id="body"
                name="body"
                rows="6"
                placeholder='{"key": "value"}'></textarea>
            </div>

            <button type="submit" disabled={loading}>Send Request</button>
          </form>
        </div>

        <div class="tab-content" id="history">
          <div id="request-history"></div>
        </div>

        {error && <div class="error">{error}</div>}
        {responseData && (
          <div class="form-group">
            <label>Response</label>
            <pre>{responseData}</pre>
          </div>
        )}
      </div>

      <div id="status-bar" class="status-bar"></div>

      <div class="card mt-4">
        <h2>Console Output</h2>
        <pre id="console-output" class="console"></pre>
      </div>

      <div class="card mt-4">
        <h2>API Response</h2>
        <pre id="api-response" class="response"></pre>
      </div>
    </div>
    <script>
      // Console logging setup
      function consoleLog(...args) {
        const consoleOutput = document.getElementById('console-output')
        if (consoleOutput) {
          consoleOutput.textContent += args.map(arg => 
            typeof arg === 'object' ? JSON.stringify(arg, null, 2) : String(arg)
          ).join(' ') + '\n'
          consoleOutput.scrollTop = consoleOutput.scrollHeight
        }
      }

      // Override console.log
      const originalConsoleLog = console.log
      console.log = (...args) => {
        originalConsoleLog.apply(console, args)
        consoleLog(...args)
      }

      // Copy of apiExamples from the Astro script
      const apiExamples = [
        {
          name: 'Get All Lists',
          endpoint: 'lists',
          method: 'GET',
        },
        {
          name: 'Get List By ID',
          endpoint: 'lists/1',
          method: 'GET',
        },
        {
          name: 'Create New List',
          endpoint: 'lists',
          method: 'POST',
          body: {
            name: 'New List',
            description: 'Test list created via API',
            public: true,
          },
        },
        {
          name: 'Update List',
          endpoint: 'lists/1',
          method: 'PUT',
          body: {
            name: 'Updated List Name',
            description: 'Updated description',
          },
        },
        {
          name: 'Delete List',
          endpoint: 'lists/1',
          method: 'DELETE',
        },
        {
          name: 'Get List Items',
          endpoint: 'lists/1/items',
          method: 'GET',
        },
        {
          name: 'Add Item to List',
          endpoint: 'lists/items',
          method: 'POST',
          body: {
            id_list: 1,
            id_src: 123,
          },
        },
        {
          name: 'Remove Item from List',
          endpoint: 'lists/items/1',
          method: 'DELETE',
        },
        {
          name: 'Create New Link',
          endpoint: 'links',
          method: 'POST',
          body: {
            name: 'Example Link',
            url: 'https://example.com',
            title: 'Example Website',
            description: 'This is an example website',
            user_id: 'user123',
          },
        },
        {
          name: 'Get Link By ID',
          endpoint: 'links/1',
          method: 'GET',
        },
        {
          name: 'Get Context Types',
          endpoint: 'contexts',
          method: 'GET',
        },
        {
          name: 'Get Resource Types',
          endpoint: 'resources',
          method: 'GET',
        },
        {
          name: 'Get Function Types',
          endpoint: 'functions',
          method: 'GET',
        },
      ]

      /**
       * @type {{
       *   timestamp: string,
       *   method: string,
       *   endpoint: string,
       *   status: number,
       *   responseTime: string,
       *   request: string,
       *   response: any
       * }[]}
       */
      let requestHistory: any = []

      // Function to update request history
      function updateRequestHistory() {
        const historyContainer = document.getElementById('request-history')
        if (!historyContainer) return

        historyContainer.innerHTML = requestHistory
          .map(
            (req, index) => `
          <div class="history-item">
            <div class="history-header">
              <span class="method ${req.method.toLowerCase()}">${req.method}</span>
              <span class="endpoint">${req.endpoint}</span>
              <span class="status">${req.status}</span>
              <span class="time">${req.responseTime}</span>
              <span class="timestamp">${req.timestamp}</span>
            </div>
            <div class="history-details">
              <div class="request-details">
                <h4>Request:</h4>
                <pre>${JSON.stringify(JSON.parse(req.request), null, 2)}</pre>
              </div>
              <div class="response-details">
                <h4>Response:</h4>
                <pre>${JSON.stringify(req.response, null, 2)}</pre>
              </div>
            </div>
          </div>
        `,
          )
          .join('')

        // Add event handlers to show/hide details
        document.querySelectorAll('.history-header').forEach((header) => {
          header.addEventListener('click', () => {
            const details = header.nextElementSibling
            if (details instanceof HTMLElement) {
              details.style.display =
                details.style.display === 'none' ? 'block' : 'none'
            }
          })
        })
      }

      // Function to run predefined examples
      function runExample(endpoint: string, method: string = 'GET', body: any = null) {
        const form = document.querySelector('form')
        if (!form) return

        form.endpoint.value = endpoint
        form.method.value = method
        if (body) {
          form.body.value = JSON.stringify(body, null, 2)
        } else {
          form.body.value = ''
        }

        // Simulate form submission
        const submitButton = form.querySelector('button[type="submit"]')
        if (submitButton) submitButton.click()
      }

      // Handle form submission
      async function handleSubmit(event: SubmitEvent) {
        event.preventDefault()
        const form = event.target
        const endpoint = form.endpoint.value
        const method = form.method.value

        // Clear previous output
        const consoleOutput = document.getElementById('console-output')
        const apiResponse = document.getElementById('api-response')
        if (consoleOutput) consoleOutput.textContent = ''
        if (apiResponse) apiResponse.textContent = ''
        const requestBody = form.body?.value || '{}'

        let loading = true
        let error = ''
        let responseData = ''

        try {
          console.log(`Making ${method} request to: ${endpoint}`)
          if (method !== 'GET') {
            console.log('Request body:', JSON.parse(requestBody))
          }
          const url = new URL(`/api/v1/${endpoint}`, window.location.origin)

          const startTime = performance.now()

          let response
          if (method === 'GET') {
            response = await fetch(url.toString())
          } else {
            const bodyInput = form.querySelector('#body') as HTMLTextAreaElement
            const requestBody = bodyInput?.value ? JSON.parse(bodyInput.value) : {}
            response = await fetch(url.toString(), {
              method,
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(requestBody),
            })
          }

          const endTime = performance.now()
          const responseTime = Math.round(endTime - startTime)

          const data = await response.json()
          const responseData = JSON.stringify(data, null, 2)
          if (apiResponse) apiResponse.textContent = responseData
          console.log('Response:', data)

          // Aggiorna la barra di stato
          const statusBar = document.getElementById('status-bar')
          statusBar.textContent = `${response.status} ${response.statusText}`
          statusBar.className = `status-bar ${response.ok ? 'success' : 'error'}`
          statusBar.style.display = 'block'

          // Add the call to history
          requestHistory.unshift({
            timestamp: new Date().toLocaleTimeString(),
            method,
            endpoint,
            status: response.status,
            responseTime: `${responseTime}ms`,
            request: requestBody,
            response: data,
          })

          // Keep only the last 10 requests
          if (requestHistory.length > 10) {
            requestHistory.pop()
          }

          // Update the display
          updateRequestHistory()

          // Show response in the UI
          const responsePre = document.querySelector('pre')
          if (responsePre) {
            responsePre.textContent = responseData
          }
        } catch (err) {
          error = err instanceof Error ? err.message : 'An error occurred'
          console.error('Error:', error)
          
          // Mostra errore nella barra di stato
          const statusBar = document.getElementById('status-bar')
          statusBar.textContent = `Error: ${err.message}`
          statusBar.className = 'status-bar error'
          statusBar.style.display = 'block'
          // Show error in the UI
          const errorDiv = document.querySelector('.error')
          if (errorDiv) {
            errorDiv.textContent = error
          }
        } finally {
          loading = false
        }
      }

      // Tab switching logic
      document.querySelectorAll('.tab').forEach((tab) => {
        tab.addEventListener('click', () => {
          document
            .querySelectorAll('.tab')
            .forEach((t) => t.classList.remove('active'))
          document
            .querySelectorAll('.tab-content')
            .forEach((tc) => tc.classList.remove('active'))
          tab.classList.add('active')
          const tabContent = document.getElementById(tab.dataset.tab)
          if (tabContent) {
            tabContent.classList.add('active')
          }
        })
      })

      // Attach form submit handler
      const formElement = document.querySelector('form')
      if (formElement) {
        formElement.addEventListener('submit', handleSubmit)
      }

      // Initial history update
      updateRequestHistory()

      // Attach runExample to window so inline onclick can access it
      window.runExample = runExample
    </script>
  </body>
</html>
