---
import Layout from '@/layouts/Layout.astro'
import * as api from '@/api/apiClient'
import type { Link, Collection, UserList, ListItem } from '@/types'

// Fetch lists
const listsResponse = await api.lists.getAll()
const lists = listsResponse.data || []

// Fetch links
const linksResponse = await api.links.getAll()
const links = linksResponse.data || []

// Fetch collections
const collectionsResponse = await api.collections.getAll()
const collections = collectionsResponse.data || []

// Log results for testing
console.log({
    lists,
    links,
    collections,
})

// Example of error handling and type safety
interface ApiTestResults {
    success: boolean
    lists: UserList[]
    links: Link[]
    collections: Collection[]
    errors: string[]
}

const testResults: ApiTestResults = {
    success: true,
    lists: [],
    links: [],
    collections: [],
    errors: [],
}

try {
    // Test lists API
    const listResponse = await api.lists.create({
        name: 'Test List',
        description: 'Created via API test',
        public: true,
    })

    if (listResponse.data) {
        const listId = listResponse.data.id
        testResults.lists.push(listResponse.data)

        // Test update
        const updateResponse = await api.lists.update(listId, {
            description: 'Updated via API test',
        })

        if (updateResponse.data) {
            testResults.lists.push(updateResponse.data)
        }

        // Clean up - delete the test list
        await api.lists.delete(listId)
    }
} catch (error) {
    testResults.success = false
    testResults.errors.push(
        `Lists API error: ${
            typeof error === 'object' && error !== null && 'message' in error
                ? (error as { message: string }).message
                : String(error)
        }`,
    )
}

try {
    // Test links API
    const linkResponse = await api.links.create({
        title: 'Test Link',
        url: 'https://example.com',
        description: 'Created via API test',
        context_id: '1',
        resource_id: '1',
        function_id: '1',
    })

    if (linkResponse.data) {
        const linkId = linkResponse.data.id
        testResults.links.push(linkResponse.data)

        // Test update
        const updateResponse = await api.links.update(linkId, {
            description: 'Updated via API test',
        })

        if (updateResponse.data) {
            testResults.links.push(updateResponse.data)
        }

        // Clean up - delete the test link
        await api.links.delete(linkId)
    }
} catch (error) {
    testResults.success = false
    testResults.errors.push(
        `Links API error: ${
            typeof error === 'object' && error !== null && 'message' in error
                ? (error as { message: string }).message
                : String(error)
        }`,
    )
}

// Log test results
console.log('API Test Results:', testResults)
---

<Layout title="API Test Dashboard">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <!-- Status Overview -->
        <div class="mb-8 grid grid-cols-1 md:grid-cols-3 gap-4">
            {
                [
                    {
                        title: 'Total Lists',
                        value: lists.length,
                        icon: '📋',
                        color: 'primary',
                    },
                    {
                        title: 'Total Links',
                        value: links.length,
                        icon: '🔗',
                        color: 'secondary',
                    },
                    {
                        title: 'Total Collections',
                        value: collections.length,
                        icon: '📁',
                        color: 'accent',
                    },
                ].map((stat) => (
                    <div class="bg-surface overflow-hidden shadow-lg rounded-lg border border-gray-800 group hover:border-gray-700 transition-colors duration-200">
                        <div class="px-4 py-5 sm:p-6">
                            <div class="flex items-center justify-between">
                                <dt class="text-sm font-medium text-gray-400 truncate group-hover:text-gray-300 transition-colors duration-200">
                                    <span class="mr-2">{stat.icon}</span>
                                    {stat.title}
                                </dt>
                                <div
                                    class={`px-2 py-1 text-xs rounded-full bg-${stat.color} bg-opacity-10 text-${stat.color}`}
                                >
                                    API v1
                                </div>
                            </div>
                            <dd class="mt-3 text-3xl font-semibold text-white">
                                {stat.value}
                            </dd>
                            <div class="mt-1">
                                <div
                                    class={`h-1 rounded-full bg-${stat.color}`}
                                    style={`width: ${Math.min(100, stat.value * 10)}%`}
                                />
                            </div>
                        </div>
                    </div>
                ))
            }
        </div>

        <!-- Test Results Status -->
        <div
            class="mb-8 bg-surface overflow-hidden shadow-lg rounded-lg border border-gray-800"
        >
            <div class="px-6 py-5">
                <div class="flex items-center justify-between mb-4">
                    <h2
                        class="text-lg font-medium text-white flex items-center"
                    >
                        <span class="mr-2">🧪</span>
                        Test Status
                    </h2>
                    <span
                        class={`px-3 py-1 rounded-full text-sm ${testResults.success ? 'bg-green-500 bg-opacity-10 text-green-400' : 'bg-red-500 bg-opacity-10 text-red-400'}`}
                    >
                        {
                            testResults.success
                                ? '✓ All Tests Passed'
                                : '✕ Tests Failed'
                        }
                    </span>
                </div>

                <div class="flex items-center space-x-4">
                    <div
                        class="flex-1 bg-gray-800 rounded-full h-2 overflow-hidden"
                    >
                        <div
                            class={`h-full rounded-full ${testResults.success ? 'bg-green-500' : 'bg-red-500'}`}
                            style={`width: ${testResults.success ? '100%' : '50%'}`}
                        >
                        </div>
                    </div>
                    <span class="text-sm text-gray-400">
                        {testResults.success ? '100%' : '50%'}
                    </span>
                </div>

                {
                    testResults.errors.length > 0 && (
                        <div class="mt-4 bg-red-900 bg-opacity-20 border border-red-800 rounded-lg p-4">
                            <div class="flex">
                                <div class="flex-shrink-0">
                                    <svg
                                        class="h-5 w-5 text-red-400"
                                        viewBox="0 0 20 20"
                                        fill="currentColor"
                                    >
                                        <path
                                            fill-rule="evenodd"
                                            d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
                                            clip-rule="evenodd"
                                        />
                                    </svg>
                                </div>
                                <div class="ml-3">
                                    <h3 class="text-sm font-medium text-red-400">
                                        Errors Found
                                    </h3>
                                    <div class="mt-2 text-sm text-red-300">
                                        <ul class="list-disc pl-5 space-y-1">
                                            {testResults.errors.map((error) => (
                                                <li class="text-red-300">
                                                    {error}
                                                </li>
                                            ))}
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>
                    )
                }
            </div>
        </div>

        <!-- Data Tabs -->
        <div class="mt-8">
            <div class="sm:hidden">
                <label for="tabs" class="sr-only">Select a tab</label>
                <select
                    id="tabs"
                    name="tabs"
                    class="block w-full bg-surface border-gray-700 rounded-md focus:ring-primary focus:border-primary"
                >
                    <option>Lists</option>
                    <option>Links</option>
                    <option>Collections</option>
                    <option>Test Results</option>
                </select>
            </div>
            <div class="hidden sm:block">
                <nav class="flex space-x-4" aria-label="Tabs">
                    {
                        [
                            { name: 'Lists', count: lists.length },
                            { name: 'Links', count: links.length },
                            { name: 'Collections', count: collections.length },
                            {
                                name: 'Test Results',
                                count: testResults.errors.length,
                            },
                        ].map((tab, index) => (
                            <button
                                class={`px-3 py-2 font-medium text-sm rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-primary
                            ${index === 0 ? 'bg-surface text-white' : 'text-gray-400 hover:text-white'}`}
                            >
                                {tab.name}
                                {tab.count > 0 && (
                                    <span
                                        class={`ml-2 py-0.5 px-2.5 rounded-full text-xs
                                ${index === 0 ? 'bg-gray-800' : 'bg-gray-800'}`}
                                    >
                                        {tab.count}
                                    </span>
                                )}
                            </button>
                        ))
                    }
                </nav>
            </div>

            <!-- Tab Panels -->
            <div class="mt-4 bg-surface rounded-lg shadow-lg overflow-hidden">
                <div class="p-6">
                    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                        {
                            [
                                {
                                    title: 'Lists',
                                    data: lists,
                                    color: 'primary',
                                },
                                {
                                    title: 'Links',
                                    data: links,
                                    color: 'secondary',
                                },
                                {
                                    title: 'Collections',
                                    data: collections,
                                    color: 'accent',
                                },
                                {
                                    title: 'Test Results',
                                    data: testResults,
                                    color: testResults.success
                                        ? 'green-500'
                                        : 'red-500',
                                },
                            ].map((section) => (
                                <div class="bg-background rounded-lg overflow-hidden border border-gray-800">
                                    <div class="px-4 py-3 border-b border-gray-800 flex justify-between items-center">
                                        <h3 class="text-sm font-medium text-gray-300">
                                            {section.title}
                                        </h3>
                                        <span
                                            class={`px-2 py-1 text-xs rounded-full bg-${section.color} bg-opacity-10 text-${section.color}`}
                                        >
                                            {Array.isArray(section.data)
                                                ? `${section.data.length} items`
                                                : 'Details'}
                                        </span>
                                    </div>
                                    <div class="p-4">
                                        <pre class="text-xs text-gray-300 whitespace-pre-wrap font-mono bg-gray-900 rounded-lg p-4 overflow-x-auto">
                                            {JSON.stringify(
                                                section.data,
                                                null,
                                                2,
                                            )}
                                        </pre>
                                    </div>
                                </div>
                            ))
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Test Results Details -->
        <div class="bg-white shadow rounded-lg overflow-hidden">
            <div class="px-4 py-5 border-b border-gray-200 sm:px-6">
                <h3 class="text-lg font-medium leading-6 text-gray-900">
                    Test Results Details
                </h3>
            </div>
            <div class="px-4 py-5 sm:p-6">
                <div class="bg-gray-50 rounded-lg p-4 overflow-x-auto">
                    <pre
                        class="text-sm text-gray-800 whitespace-pre-wrap font-mono">
                            {JSON.stringify(testResults, null, 2)}
                        </pre>
                </div>
            </div>
        </div>
    </div>
</Layout>
